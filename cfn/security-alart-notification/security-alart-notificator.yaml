AWSTemplateFormatVersion: "2010-09-09"

Description: "security-alart-notificator.yaml"

Parameters:

  AppName:
    Description: "App name."
    Type: "String"
    Default: "gov-base"

  SecurityHubTeamsIncomingWebhookUrlDev:
    Description: ""
    Type: "String"

Resources: 

  SecurityAlartNotificatorFunc:
    Type: AWS::Lambda::Function
    DependsOn:
      - "SecurityAlartNotificatorFuncLogGroup"
    Properties:
      FunctionName: !Sub "${AppName}---security-alart-notificator"
      Description: "notify security alart from EventBridge."
      Runtime: nodejs16.x
      Role: !GetAtt SecurityAlartNotificatorFuncRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          "GOV_BASE__SECURITY_HUB_TEAMS_INCOMING_WEBHOOK_URL_DEV" : !Ref SecurityHubTeamsIncomingWebhookUrlDev
      TracingConfig:
        Mode: Active
      Code:
        ZipFile: |
          // const AWS = require("aws-sdk")
          const https = require("https")

          exports.handler = async (event, context) => {
            try {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));
              const message = JSON.parse(event.Records[0].body).Message;
              console.log("message:\n" + message);
              console.log("message.title:\n" + JSON.parse(message).title);
              console.log("message.text:\n" + JSON.parse(message).text);
            } catch (e) {
              console.log("event is not JSON.:\n" + event);
            }

            try {
              const teamsIncomingWebHookUrl = process.env.GOV_BASE__SECURITY_HUB_TEAMS_INCOMING_WEBHOOK_URL_DEV;
              const message = JSON.parse(event.Records[0].body).Message;
              console.log("MESSAGE::\n" + message);
              // const foo = "<br/>- **項目**<br/>あああああああ<br/>- **みだし**<br/>いいいいいいい"
              const data = JSON.stringify(
                {
                  title: JSON.parse(message).title, 
                  text: JSON.parse(message).text.replaceAll("\n","<br/>"),
                }
              );
              const res = await request(
                teamsIncomingWebHookUrl,
                {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    "Content-Length": Buffer.byteLength(data)
                  },
                },
                data
              );
              console.log("RESPONSE:::");
              console.log(res.data);
              console.log(res.response.statusCode)
            } catch (e) {
              console.error(e);
              throw e;
            }
          };

          const request = async (url, options, body) => {
            return new Promise((resolve, reject) => {
              const req = https
                .request(url, options, (res) => {
                  res.setEncoding("utf8");
                  let data = "";
                  res
                    .on("data", (chunk) => {
                      data += chunk;
                    })
                    .on("end", () => {
                      // console.log(data)
                      resolve({ response: res, data: data } );
                    });
                })
                .on("error", (error) => {
                  reject(error);
                })
                .on("timeout", () => {
                  req.destroy();
                  reject("Request Timeout");
                });
              req.setTimeout(10000);
              req.write(body);
              req.end();
            });
          };

  SecurityAlartNotificatorFuncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AppName}---security-alart-notificator"
      RetentionInDays: 400

  SecurityAlartNotificatorFuncRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}---security-alart-notificator"
      Path: !Sub "/${AppName}/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AdministratorAccess"
      PermissionsBoundary: !Sub "arn:aws:iam::${AWS::AccountId}:policy/gov-base---permissions-boundary-for-role"
